[project]
name = "compliance-factory-api"
version = "0.1.0"
description = "OSCAL compliance factory API service"
authors = [
    {name = "Compliance Factory", email = "team@compliance-factory.io"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.12"
keywords = ["oscal", "compliance", "fedramp", "nist"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Government",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "fastapi[standard] >=0.115.0",
    "uvicorn[standard] >=0.32.0",
    "pydantic >=2.10.0",
    "pydantic-settings >=2.6.0",
    "sqlalchemy >=2.0.36",
    "alembic >=1.14.0", 
    "asyncpg >=0.30.0",
    "minio >=7.2.10",
    "python-multipart >=0.0.12",
    "httpx >=0.28.0",
    "jinja2 >=3.1.4",
    "markdown >=3.7",
    "python-docx >=1.1.2",
    "lxml >=5.3.0",
    "typer >=0.15.1",
    "rich >=13.9.4",
    "structlog >=24.4.0",
    "orjson >=3.10.12",
]

[project.optional-dependencies]
dev = [
    "pytest >=8.3.4",
    "pytest-asyncio >=0.24.0",
    "pytest-cov >=6.0.0",
    "pytest-mock >=3.14.0",
    "httpx >=0.28.0",  # for TestClient
    "ruff >=0.8.4",
    "mypy >=1.13.0",
    "pre-commit >=4.0.1",
    "watchfiles >=0.24.0",
]

test = [
    "pytest >=8.3.4",
    "pytest-asyncio >=0.24.0", 
    "pytest-cov >=6.0.0",
    "pytest-mock >=3.14.0",
    "httpx >=0.28.0",
]

docs = [
    "mkdocs >=1.6.1",
    "mkdocs-material >=9.5.44",
    "mkdocs-swagger-ui-tag >=0.6.10",
]

[build-system]
requires = ["setuptools>=61", "wheel"]
build-backend = "setuptools.build_meta"

[project.scripts]
compliance-api = "app.cli:app"

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C90", # mccabe complexity
    "UP",  # pyupgrade
    "D",   # pydocstyle
    "S",   # bandit security
    "N",   # pep8-naming
    "ANN", # flake8-annotations
    "ASYNC", # flake8-async
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "FA",  # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "TD",  # flake8-todos
    "FIX", # flake8-fixme
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # numpy
    "AIR", # airflow
    "PERF", # perflint
    "FURB", # refurb
    "LOG", # flake8-logging
    "RUF", # ruff-specific
]

ignore = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class  
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in __init__
    "ANN101", # Missing type annotation for self
    "ANN102", # Missing type annotation for cls
    "COM812", # Trailing comma missing (conflicts with formatter)
    "ISC001", # Implicitly concatenated string literals (conflicts with formatter)
    "S104", # Possible binding to all interfaces
    "PLR0913", # Too many arguments to function call
    "B008", # Do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101", # Use of assert
    "D",    # All docstring rules
    "ANN",  # All annotation rules  
    "PLR2004", # Magic value used in comparison
    "S105", # Possible hardcoded password
    "S106", # Possible hardcoded password
    "S107", # Possible hardcoded password
]
"migrations/**/*.py" = [
    "D",    # All docstring rules
    "ANN",  # All annotation rules
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = false
strict_equality = true
plugins = [
    "pydantic.mypy",
]

[[tool.mypy.overrides]]
module = [
    "minio.*",
    "docx.*",
    "lxml.*",
    "alembic.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=85",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests related to security",
    "oscal: marks tests related to OSCAL functionality",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
source = ["app"]
omit = [
    "app/migrations/*",
    "tests/*",
    "*/venv/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"